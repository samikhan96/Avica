/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <wfdb/wfdb.h>
#include "string.h"
/* Header for class com_vivalnk_sdk_demo_core_WfdbUtils */
#include "com_vivalnk_sdk_demo_core_WfdbUtils.h"

#ifdef __cplusplus
extern "C" {
#endif

static WFDB_Siginfo *siginfo;
static char *dataFile, *heaFile;

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    initFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_initFile
  (JNIEnv *env, jclass clz, jstring data, jstring hea) {
    jboolean isCopy = static_cast<jboolean>(false);

    const char *dataFileTemp = env->GetStringUTFChars(data, &isCopy);
    if(dataFileTemp == NULL) {
        return;
    }
    const char *heaFileTemp = env->GetStringUTFChars(hea, &isCopy);
    if(heaFileTemp == NULL) {
      return;
    }

    int len_data = env->GetStringUTFLength(data);
    dataFile = (char *) malloc(sizeof(char) * len_data);
    strcpy(dataFile, dataFileTemp);

    int len_hea = env->GetStringUTFLength(hea);
    heaFile = (char *) malloc(sizeof(char) * len_hea);
    strcpy(heaFile, heaFileTemp);

    siginfo = (WFDB_Siginfo *) malloc(sizeof(WFDB_Siginfo));
    if (siginfo == NULL) {
        fprintf(stderr, "insufficient memory\n");
        exit(1);
    }

    env->ReleaseStringUTFChars(data, dataFileTemp);
    env->ReleaseStringUTFChars(hea, heaFileTemp);


}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    initSignalInfo
 * Signature: (IILjava/lang/String;Ljava/lang/String;III)V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_initSignalInfo
  (JNIEnv *env, jclass clz, jint frequency, jint format, jstring descJStr, jstring unitsJStr, jint gain, jint adcres, jint adczero) {

    jboolean isCopy = static_cast<jboolean>(false);

    const char *desc = env->GetStringUTFChars(descJStr, &isCopy);
    if(desc == NULL) {
        return;
    }
    const char *units = env->GetStringUTFChars(unitsJStr, &isCopy);
    if(units == NULL) {
        return;
    }

    //采样频率
    setsampfreq(frequency);
    siginfo->fmt = format;
    //数据记录文件
    ///cygdrive/c/Users/Jake/temp/
    siginfo->fname = dataFile;
    siginfo->group = 0;
    //信号描述
    siginfo->fmt = siginfo->fmt;
    siginfo->bsize = 0;
    //printf("Signal description [up to 30 characters]: ");
    siginfo->desc = const_cast<char *>(desc);
    //printf("Signal units [up to 20 characters]: ");
    siginfo->units = const_cast<char *>(units);
    //printf(" Signal gain [adu/%s]: ", s->units);
    siginfo->gain = gain; //mV
    //printf(" Signal ADC resolution in bits [8-16]: ");
    siginfo->adcres = adcres;
    //printf(" Signal ADC zero level [adu]: ");
    siginfo->adczero = adczero;

//    env->ReleaseStringUTFChars(descJStr, desc);
//    env->ReleaseStringUTFChars(unitsJStr, units);

}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    open
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_open
  (JNIEnv *env, jclass clz) {
    if (osigfopen(siginfo, 1) < 1) exit(1);
}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    setBaseTime
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_setBaseTime
  (JNIEnv *env, jclass clz, jstring timeStr) {
    jboolean isCopy = static_cast<jboolean>(false);
    const char *time = env->GetStringUTFChars(timeStr, &isCopy);
    if(time == NULL) {
        return;
    }
    setbasetime(const_cast<char *>(time));

    env->ReleaseStringUTFChars(timeStr, time);

}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    doSample
 * Signature: ([IJ)V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_doSample
  (JNIEnv *env, jclass clz, jintArray sampleArray) {

    WFDB_Sample *v = (WFDB_Sample *) malloc(sizeof(WFDB_Sample));
    if (v == NULL) {
        fprintf(stderr, "insufficient memory\n");
        exit(1);
    }

    jint* ecg_i = env->GetIntArrayElements(sampleArray, 0);
    jint ecg_i_len = env->GetArrayLength(sampleArray);

    for (int i = 0; i < ecg_i_len; i++) {
        *v = ecg_i[i];
        if (putvec(v) < 0) exit(1);
    }

    free(v);

    env->ReleaseIntArrayElements(sampleArray, ecg_i, 0);

}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    newHeader
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_newHeader
(JNIEnv *env, jclass clz) {
  (void) newheader(heaFile);
}

/*
 * Class:     com_vivalnk_sdk_demo_core_WfdbUtils
 * Method:    close
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_vivalnk_sdk_demo_core_WfdbUtils_close
  (JNIEnv *env, jclass clz) {
    //wfdb 库退出
    wfdbquit();

    free(dataFile);
    free(heaFile);
    free(siginfo);

}

#ifdef __cplusplus
}
#endif